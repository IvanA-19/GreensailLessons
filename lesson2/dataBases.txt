1. Создание базы данных(БД)
    1.1 Для работы с базами данных будем использовать встроенную в Python библиотеку sqlite3

    1.2 Для начала работы подключаем библиотеку:
        import sqlite3

    1.3 Теперь нам необходимо подключиться к существующей БД или создать новую:
        db = sqlite3.connect("имя_БД.db", check_same_thread=False)

    1.4 Устанавливаем параметр check_same_thread в значение False, для того чтобы поток при подключении к БД
        не проверялся. Это понадобится нам при использовании БД с ботами

    1.5 Для работы с данными в БД мы будем использовать курсор, который позволит нам взаимодействовать с БД и ее
        элементами, передавать в БД запросы и получать ответы

    1.6 Создадим курсор:
        cursor = db.cursor()

2. Язык управления базами данных SQL(Structure Query Language)
    2.1 Передача запросов в БД через курсор
        Для того, чтобы передать запрос в БД с помощью курсора - необходимо использовать следующий синтаксис:
        cursor.execute("SQL запрос", параметры)
        db.commit() - сохранение в случае изменения данных в таблице

    2.2 Типы запросов:
        2.1.1 Запрос на создание таблицы в БД
            Запрос на создание таблицы имеет следующий синтаксис:
                CREATE TABLE имя таблицы(поле таблицы ТИП ДАННЫХ,
                поле таблицы ТИП ДАННЫХ,
                поле таблицы ТИП ДАННЫХ...);

            В случае, если мы хотим проверить, существует ли уже такая таблица в БД и, если нет - создать, то
            необходимо добавить в запрос параметр IF NOT EXISTS:
                CREATE TABLE IF NOT EXISTS имя таблицы(поле таблицы ТИП ДАННЫХ,
                поле таблицы ТИП ДАННЫХ,
                поле таблицы ТИП ДАННЫХ...);

            Типы данных, которые мы будем использовать чаще всего при написании чат-ботов:
                INT(INTEGER) - целые числа
                REAL(FLOAT) - числа с плавающей точкой
                CHAR_FIELD - поле для хранения символьной строки длинной до 250 символов
                TEXT_FIELD - поле для хранения объемного текста
                DATETIME_FIELD - поле для хранения даты и времени

            Пример создания таблицы вы сможете найти в папке sqliteDatabases

        2.1.2 Запрос на запись данных в таблицу
            Запрос на запись данных имеет следующий синтаксис:
                В случае, если необходимо заполнить только конкретные поля:
                    INSERT INTO имя таблицы (имя поля, имя поля, имя поля) VALUES (значение, значение, значение)
                В случае, если нужно заполнить все поля:
                    INSERT INTO имя таблицы VALUES (значение, значение, значение...)
                    передаются значения для всех полей, имеющихся в таблице

                При использовании запроса на запись через курсор можно опустить прописывание каждого значения вручную и
                передать их в виде списка:
                    cursor.execute("INSERT INTO имя таблицы VALUES(?, ?, ?,...)", [список значений])
                    db.commit()

                При запросе на запись необходимо подтвердить изменения, поэтому используем db.commit()

        2.1.3 Запрос на чтение данных из таблицы
            Запрос на чтение данных в самой простой формулировке выглядит следующим образом:
                SELECT * FROM имя таблицы
                Данный запрос выбирает все данные, имеющиеся в таблице
            Если мы хотим наложить условия на выборку данных - можно использовать WHERE:
                SELECT * FROM имя таблицы WHERE имя поля=значение
                Данный запрос выбирает все записи, удовлетворяющие условию
                Если мы хотим выбрать только конкретные поля - это необходимо указать вместо *
            Использование запроса на чтение с cursor:
                cursor.execute("SELECT * FROM имя таблицы WHERE поле=значение")
                Для того, чтобы посмотреть все выбранные значения, необходимо использовать
                    cursor.fetchall()
                Для того, чтобы посмотреть одно выбранное значение, необходимо использовать
                    cursor.fetchone()
                Данный метод вернет кортеж или список кортежей со значениями выбранных полей.
                Если в таблице нет записей, удовлетворяющих запросу - будет возвращено None